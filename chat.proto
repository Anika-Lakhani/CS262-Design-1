syntax = "proto3";


// Specs for the user: the identifier and the logged-in username
message User {
    string id = 1;
    string username = 2;
}

// Will allow us to print out a list of users
message UsernameList {
    repeated User users = 1;
}

// Used for allowing a user to join the chat
message JoinAbility {
    int32 error = 1;
    string successMessage = 2;
}

// Shows the specs of what will be displayed with a user's chat message
message MessageInfo {
    string sender = 1;
    string message = 2;
}

// This can be empty because we don't have any specs for the messages
message baseMessage {}

service ChatFunctionality {

    // Takes a user's information; allows a user to join the chat
    rpc joinChat(User) returns (JoinAbility) {}
    
    // Prints out a list of accounts
    rpc displayUserList(baseMessage) returns (UsernameList) {}

    // To send a message, you need the 'specs' of what will be displayed
    rpc sendMessage(MessageInfo) returns (baseMessage) {}
    
    // To receive a message, you want to generate a stream of MessageInfo entries
    rpc receiveMessage(baseMessage) returns (stream MessageInfo) {}
}